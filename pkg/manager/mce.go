package manager

import (
	"context"
	"encoding/base64"
	"fmt"

	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/client"

	"github.com/ghodss/yaml"
	hivev1 "github.com/openshift/hive/apis/hive/v1"
	"github.com/openshift/installer/pkg/ipnet"
	installer "github.com/openshift/installer/pkg/types"
	"github.com/openshift/installer/pkg/types/aws"
	clusterv1 "open-cluster-management.io/api/cluster/v1"

	hiveaws "github.com/openshift/hive/apis/hive/v1/aws"
)

func (m *jobManager) createManagedCluster(name, platform string) (*clusterv1.ManagedCluster, error) {
	clusterName := fmt.Sprintf("chat-bot-%s", name)

	// All managed clusters get their own namespace. The namespace is automatically deleted when the ManagedCluster within it is deleted.
	_, err := m.dpcrNamespaceClient.Create(context.TODO(), &v1.Namespace{ObjectMeta: metav1.ObjectMeta{Name: clusterName, Labels: map[string]string{"test": "test"}}}, metav1.CreateOptions{})
	if err != nil {
		return nil, fmt.Errorf("failed to create namespace: %w", err)
	}

	// copy credentials from main chat-bot secrets namespace
	chatBotSecretsClient := m.dpcrCoreClient.Secrets("ci-chat-bot-credentials")
	clusterSecretsClient := m.dpcrCoreClient.Secrets(clusterName)
	platformsCreds, err := chatBotSecretsClient.Get(context.TODO(), fmt.Sprintf("%s-credentials", platform), metav1.GetOptions{})
	if err != nil {
		return nil, fmt.Errorf("failed to get platform (%s) credentials: %v", platform, err)
	}
	platformsCreds.SetNamespace(clusterName)
	platformsCreds.SetName(fmt.Sprintf("%s-%s-creds", clusterName, platform))
	if _, err := clusterSecretsClient.Create(context.TODO(), platformsCreds, metav1.CreateOptions{}); err != nil {
		return nil, fmt.Errorf("failed to create platform (%s) credentials: %v", platform, err)
	}
	pullSecret, err := chatBotSecretsClient.Get(context.TODO(), "mce-pull-secret", metav1.GetOptions{})
	if err != nil {
		return nil, fmt.Errorf("failed to get pull secret: %v", err)
	}
	pullSecret.SetNamespace(clusterName)
	pullSecret.SetName(fmt.Sprintf("%s-pull-secret", clusterName))
	if _, err := clusterSecretsClient.Create(context.TODO(), pullSecret, metav1.CreateOptions{}); err != nil {
		return nil, fmt.Errorf("failed to create pull secret: %v", err)
	}
	replicas := int64(3)
	// copied from autogenerated installConfig from web interface
	installConfig := &installer.InstallConfig{
		ObjectMeta: metav1.ObjectMeta{
			Name: clusterName,
		},
		BaseDomain: fmt.Sprintf("crt-mce-%s.devcluster.openshift.com", platform),
		ControlPlane: &installer.MachinePool{
			Hyperthreading: "Enabled",
			Name:           "master",
			Replicas:       &replicas,
			Platform: installer.MachinePoolPlatform{
				AWS: &aws.MachinePool{
					Zones: []string{"us-east-1a"},
					EC2RootVolume: aws.EC2RootVolume{
						IOPS: 4000,
						Size: 100,
						Type: "io1",
					},
					InstanceType: "m5.xlarge",
				},
			},
		},
		Compute: []installer.MachinePool{{
			Hyperthreading: "Enabled",
			Name:           "compute",
			Replicas:       &replicas,
			Platform: installer.MachinePoolPlatform{
				AWS: &aws.MachinePool{
					Zones: []string{"us-east-1a"},
					EC2RootVolume: aws.EC2RootVolume{
						IOPS: 2000,
						Size: 100,
						Type: "io1",
					},
					InstanceType: "m5.xlarge",
				},
			},
		}},
		Networking: &installer.Networking{
			NetworkType: "OVNKubernetes",
			ClusterNetwork: []installer.ClusterNetworkEntry{
				{
					CIDR:       *ipnet.MustParseCIDR("10.128.0.0/14"),
					HostPrefix: 23,
				},
			},
			MachineNetwork: []installer.MachineNetworkEntry{
				{
					CIDR: *ipnet.MustParseCIDR("10.0.0.0/16"),
				},
			},
			ServiceNetwork: []ipnet.IPNet{*ipnet.MustParseCIDR("172.30.0.0/16")},
		},
		Platform: installer.Platform{
			AWS: &aws.Platform{
				Region: "us-east-1",
			},
		},
		PullSecret: "", // skip, hive will inject based on it's secrets
	}
	installConfigBytes, err := yaml.Marshal(installConfig)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal install config: %v", err)
	}
	installConfigSecret := v1.Secret{
		ObjectMeta: metav1.ObjectMeta{
			Name:      fmt.Sprintf("%s-install-config", clusterName),
			Namespace: clusterName,
		},
		Type: v1.SecretTypeOpaque,
		Data: map[string][]byte{
			"install-config.yaml": []byte(base64.StdEncoding.EncodeToString(installConfigBytes)),
		},
	}
	if _, err := clusterSecretsClient.Create(context.TODO(), &installConfigSecret, metav1.CreateOptions{}); err != nil {
		return nil, fmt.Errorf("failed to create install config secret: %v", err)
	}

	managedCluster := clusterv1.ManagedCluster{
		ObjectMeta: metav1.ObjectMeta{
			Name: clusterName,
			Labels: map[string]string{
				"Cloud":  "Amazon",
				"Region": "us-east-1",
				"name":   clusterName,
				"vendor": "OpenShift",
				"cluster.open-cluster-management.io/clusterset": "ci-chat-bot",
			},
		},
		Spec: clusterv1.ManagedClusterSpec{
			HubAcceptsClient: true,
		},
	}

	if err := m.dpcrOcmClient.Create(context.TODO(), &managedCluster, &client.CreateOptions{}); err != nil {
		return nil, fmt.Errorf("failed to create managed cluster object: %v", err)
	}

	attemptLimit := int32(1)
	clusterDeployment := hivev1.ClusterDeployment{
		ObjectMeta: metav1.ObjectMeta{
			Name:      clusterName,
			Namespace: clusterName,
			Labels: map[string]string{
				"cloud":  "AWS",
				"region": "us-east-1",
				"vendor": "OpenShift",
				"cluster.open-cluster-management.io/clusterset": "apavel-testing",
			},
		},
		Spec: hivev1.ClusterDeploymentSpec{
			BaseDomain:  fmt.Sprintf("crt-mce-%s.devcluster.openshift.com", platform),
			ClusterName: clusterName,
			ControlPlaneConfig: hivev1.ControlPlaneConfigSpec{
				ServingCertificates: hivev1.ControlPlaneServingCertificateSpec{},
			},
			InstallAttemptsLimit: &attemptLimit,
			Installed:            false,
			Platform: hivev1.Platform{
				AWS: &hiveaws.Platform{
					CredentialsSecretRef: v1.LocalObjectReference{
						Name: fmt.Sprintf("%s-%s-creds", clusterName, platform),
					},
					Region: "us-east-1",
				},
			},
			Provisioning: &hivev1.Provisioning{
				InstallConfigSecretRef: &v1.LocalObjectReference{
					Name: fmt.Sprintf("%s-install-config", clusterName),
				},
				ImageSetRef: &hivev1.ClusterImageSetReference{
					Name: "img4.16.7-multi-appsub",
				},
			},
			PullSecretRef: &v1.LocalObjectReference{
				Name: fmt.Sprintf("%s-pull-secret", clusterName),
			},
		},
	}

	if err := m.dpcrHiveClient.Create(context.TODO(), &clusterDeployment, &client.CreateOptions{}); err != nil {
		return nil, fmt.Errorf("failed to create cluster deployment: %v", err)
	}

	return &managedCluster, nil
}
